package paintagm;

import java.awt.Color;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.agm.graficos.*;
import sm.agm.iu.AboutWindow;
import sm.agm.iu.CanvasSize;
import sm.image.LookupTableProducer;
import sm.sound.*;



/**
 * Clase VentanaPrincipal
 * Un objeto de esta clase representa la ventana principal que tiene todas las
 * herramientas disponibles, tanto de dibujo como de imagen.
 * @author Angel
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    /**
     * Ventana actual
     */
    protected VentanaInterna currentWindow = null; 
    
    /**
     * Anterior ventana seleccionada
     */
    private VentanaInterna lastWindow = null; 
    
    /**
     * Dimensiones de las nuevas ventanas internas, valores por defecto
     */
    private int internalCanvasWidth = 650;
    private int internalCanvasHeight = 450;
    
    /**
     * Factor usado para hacer las ventanas internas un poco mas grandes que el lienzo
     */
    private final float sizeFactor = 1.1f;
    
    /**
     * Valor final de las dimensiones de las nuevas ventanas internas (ancho)
     */
    private int internalWindowWidth = (int) (internalCanvasWidth * sizeFactor);
    
    /**
     * Valor final de las dimensiones de las nuevas ventanas internas (alto)
     */
    private int internalWindowHeight = (int) (internalCanvasHeight * sizeFactor);
    
    /**
     * Índice de la ventanas, usado para nombrarlas
     */
    private int windowIndex = 1;
    
    /**
     * Índice de la ventanas, usado para nombrarlas (auxiliar)
     */
    private int windowIndexAux = 1;
    
    /**
     * Lados por defecto para el filtro "Ajedrez"
     */
    private int chessSides = 2;
    
    /**
     * Atributos actuales
     */
    ComplexShapeAtributes currentAtributes = new ComplexShapeAtributes();
    
    // AUDIO ->
    /**
     * Player actual
     */
    SMPlayer player = null;
    
    /**
     * Recorder actual
     */
    SMRecorder recorder = null;
    
    /**
     * Si se está grabando o no
     */
    boolean recording = false;
    
    /**
     * Tiempo de grabación
     */
    int recordingSeconds = 0;
    
    /**
     * Hebra para el cronómetro de grabación
     */
    Thread crono;
    // <- AUDIO
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
                
        setSize(1700, 900);
        setTitle("AGPaint - Ángel Gómez Martín");
    }

    /**
     * method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify code. The content of method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientas = new javax.swing.ButtonGroup();
        topSeparator = new javax.swing.JSeparator();
        statusPanel = new javax.swing.JPanel();
        toolLabel = new javax.swing.JLabel();
        mouseCoordinatesLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        duplicateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        editButton = new javax.swing.JToggleButton();
        xLabel = new javax.swing.JLabel();
        inputX = new javax.swing.JTextField();
        yLabel = new javax.swing.JLabel();
        inputY = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        pencilButton = new javax.swing.JToggleButton();
        lineButton = new javax.swing.JToggleButton();
        rectangleButton = new javax.swing.JToggleButton();
        ellipseButton = new javax.swing.JToggleButton();
        roundRectangleButton = new javax.swing.JToggleButton();
        arcButton = new javax.swing.JToggleButton();
        quadCurveButton = new javax.swing.JToggleButton();
        cubicCurveButton = new javax.swing.JToggleButton();
        pathButton = new javax.swing.JToggleButton();
        sep4 = new javax.swing.JToolBar.Separator();
        colorChooserButton = new javax.swing.JButton();
        backgroundColorChooserButton = new javax.swing.JButton();
        smoothButton = new javax.swing.JToggleButton();
        fillButton = new javax.swing.JToggleButton();
        gradientButton = new javax.swing.JToggleButton();
        gradientTypeComboBox = new javax.swing.JComboBox(sm.agm.graficos.GradientType.values());
        sep7 = new javax.swing.JToolBar.Separator();
        alphaButton = new javax.swing.JButton();
        alphaSlider = new javax.swing.JSlider();
        sep2 = new javax.swing.JToolBar.Separator();
        strokeButton = new javax.swing.JToggleButton();
        strokeSpinner = new javax.swing.JSpinner();
        sep5 = new javax.swing.JToolBar.Separator();
        vShapeComboBox = new javax.swing.JComboBox();
        sep8 = new javax.swing.JToolBar.Separator();
        audioButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        audioFilesComboBox = new javax.swing.JComboBox();
        recordButton = new javax.swing.JButton();
        recordingTime = new javax.swing.JLabel();
        sep9 = new javax.swing.JToolBar.Separator();
        imageToolBar = new javax.swing.JToolBar();
        brightnessButton = new javax.swing.JButton();
        brightnessSlider = new javax.swing.JSlider();
        sepp1 = new javax.swing.JToolBar.Separator();
        effectsButton = new javax.swing.JButton();
        effectsComboBox = new javax.swing.JComboBox(sm.agm.graficos.ImageFilterType.values());
        sepp2 = new javax.swing.JToolBar.Separator();
        negativeButton = new javax.swing.JButton();
        contrastButton = new javax.swing.JButton();
        lightButton = new javax.swing.JButton();
        darkButton = new javax.swing.JButton();
        sepp3 = new javax.swing.JToolBar.Separator();
        florButton = new javax.swing.JButton();
        sobelButton = new javax.swing.JButton();
        sinusoidalButton = new javax.swing.JButton();
        sepiaButton = new javax.swing.JButton();
        ecualizeButton = new javax.swing.JButton();
        chessButton = new javax.swing.JButton();
        chessApplyButton = new javax.swing.JButton();
        chessValueLabel = new javax.swing.JLabel();
        chessSlider = new javax.swing.JSlider();
        rainbowToggleButton = new javax.swing.JButton();
        rainbowTypeComboBox = new javax.swing.JComboBox(sm.agm.graficos.RainbowType.values());
        tintButton = new javax.swing.JButton();
        tintSlider = new javax.swing.JSlider();
        tintLabel = new javax.swing.JLabel();
        sepp = new javax.swing.JToolBar.Separator();
        extractBandsButton = new javax.swing.JButton();
        bandsCombobox = new javax.swing.JComboBox(sm.agm.graficos.ColorSpaceType.values());
        sepp5 = new javax.swing.JToolBar.Separator();
        rotateButton = new javax.swing.JButton();
        rotationSlider = new javax.swing.JSlider();
        rotate90Button = new javax.swing.JButton();
        rotate180Button = new javax.swing.JButton();
        rotate270Button = new javax.swing.JButton();
        sepp4 = new javax.swing.JToolBar.Separator();
        zoomInButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        sepp6 = new javax.swing.JToolBar.Separator();
        umbralButton = new javax.swing.JButton();
        umbralSlider = new javax.swing.JSlider();
        sep6 = new javax.swing.JToolBar.Separator();
        addImgButton = new javax.swing.JButton();
        subtractImgButton = new javax.swing.JButton();
        multiplyButton = new javax.swing.JButton();
        divideButton = new javax.swing.JButton();
        desktopPanel = new javax.swing.JPanel();
        desktop = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        nuevoArchivo = new javax.swing.JMenuItem();
        abrirArchivo = new javax.swing.JMenuItem();
        guardarArchivo = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        toggleBarraEstado = new javax.swing.JCheckBoxMenuItem();
        toggleBarraDibujo = new javax.swing.JCheckBoxMenuItem();
        toggleBarraImagen = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        changeNewCanvasSize = new javax.swing.JMenuItem();
        deleteSelected = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(topSeparator, java.awt.BorderLayout.PAGE_START);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setLayout(new java.awt.BorderLayout());

        toolLabel.setText("Barra de estado");
        statusPanel.add(toolLabel, java.awt.BorderLayout.WEST);
        statusPanel.add(mouseCoordinatesLabel, java.awt.BorderLayout.LINE_END);

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        mainPanel.setLayout(new java.awt.BorderLayout());

        toolBar.setRollover(true);

        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        newButton.setToolTipText("Nuevo");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        toolBar.add(newButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        openButton.setToolTipText("Abrir archivo");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        toolBar.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        saveButton.setToolTipText("Guardar");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        duplicateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicar.png"))); // NOI18N
        duplicateButton.setToolTipText("Duplicar lienzo");
        duplicateButton.setFocusable(false);
        duplicateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });
        toolBar.add(duplicateButton);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/garbage.png"))); // NOI18N
        deleteButton.setToolTipText("Eliminar");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        toolBar.add(deleteButton);
        toolBar.add(jSeparator3);

        grupoHerramientas.add(editButton);
        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editButton.setToolTipText("Editar");
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        toolBar.add(editButton);

        xLabel.setText("X");
        toolBar.add(xLabel);

        inputX.setText("0");
        inputX.setToolTipText("X");
        inputX.setMaximumSize(new java.awt.Dimension(45, 20));
        inputX.setMinimumSize(new java.awt.Dimension(45, 20));
        inputX.setPreferredSize(new java.awt.Dimension(45, 20));
        inputX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputXActionPerformed(evt);
            }
        });
        toolBar.add(inputX);

        yLabel.setText("Y");
        toolBar.add(yLabel);

        inputY.setText("0");
        inputY.setToolTipText("Y");
        inputY.setMaximumSize(new java.awt.Dimension(45, 20));
        inputY.setMinimumSize(new java.awt.Dimension(45, 20));
        inputY.setPreferredSize(new java.awt.Dimension(45, 20));
        inputY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputYActionPerformed(evt);
            }
        });
        toolBar.add(inputY);
        toolBar.add(jSeparator2);

        grupoHerramientas.add(pencilButton);
        pencilButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        pencilButton.setToolTipText("Punto");
        pencilButton.setFocusable(false);
        pencilButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pencilButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pencilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pencilButtonActionPerformed(evt);
            }
        });
        toolBar.add(pencilButton);

        grupoHerramientas.add(lineButton);
        lineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        lineButton.setToolTipText("Línea");
        lineButton.setFocusable(false);
        lineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });
        toolBar.add(lineButton);

        grupoHerramientas.add(rectangleButton);
        rectangleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectangleButton.setToolTipText("Rectángulo");
        rectangleButton.setFocusable(false);
        rectangleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });
        toolBar.add(rectangleButton);

        grupoHerramientas.add(ellipseButton);
        ellipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        ellipseButton.setToolTipText("Elipse");
        ellipseButton.setFocusable(false);
        ellipseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ellipseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseButtonActionPerformed(evt);
            }
        });
        toolBar.add(ellipseButton);

        grupoHerramientas.add(roundRectangleButton);
        roundRectangleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rounded-rectangle.png"))); // NOI18N
        roundRectangleButton.setToolTipText("Rectángulo redondeado");
        roundRectangleButton.setFocusable(false);
        roundRectangleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roundRectangleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        roundRectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundRectangleButtonActionPerformed(evt);
            }
        });
        toolBar.add(roundRectangleButton);

        grupoHerramientas.add(arcButton);
        arcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/arc.png"))); // NOI18N
        arcButton.setToolTipText("Arco");
        arcButton.setFocusable(false);
        arcButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        arcButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        arcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arcButtonActionPerformed(evt);
            }
        });
        toolBar.add(arcButton);

        grupoHerramientas.add(quadCurveButton);
        quadCurveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/vector.png"))); // NOI18N
        quadCurveButton.setToolTipText("Curva con un punto");
        quadCurveButton.setFocusable(false);
        quadCurveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        quadCurveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        quadCurveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quadCurveButtonActionPerformed(evt);
            }
        });
        toolBar.add(quadCurveButton);

        grupoHerramientas.add(cubicCurveButton);
        cubicCurveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curve.png"))); // NOI18N
        cubicCurveButton.setToolTipText("Curva con dos puntos");
        cubicCurveButton.setFocusable(false);
        cubicCurveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cubicCurveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cubicCurveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cubicCurveButtonActionPerformed(evt);
            }
        });
        toolBar.add(cubicCurveButton);

        grupoHerramientas.add(pathButton);
        pathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pencil.png"))); // NOI18N
        pathButton.setToolTipText("Trazo libre");
        pathButton.setFocusable(false);
        pathButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pathButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathButtonActionPerformed(evt);
            }
        });
        toolBar.add(pathButton);
        toolBar.add(sep4);

        colorChooserButton.setBackground(Color.BLACK);
        colorChooserButton.setToolTipText("Color");
        colorChooserButton.setFocusable(false);
        colorChooserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorChooserButton.setMaximumSize(new java.awt.Dimension(36, 36));
        colorChooserButton.setMinimumSize(new java.awt.Dimension(36, 36));
        colorChooserButton.setPreferredSize(new java.awt.Dimension(36, 36));
        colorChooserButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserButtonActionPerformed(evt);
            }
        });
        toolBar.add(colorChooserButton);

        backgroundColorChooserButton.setBackground(Color.GRAY);
        backgroundColorChooserButton.setVisible(false);
        backgroundColorChooserButton.setToolTipText("Color de fondo");
        backgroundColorChooserButton.setFocusable(false);
        backgroundColorChooserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundColorChooserButton.setMaximumSize(new java.awt.Dimension(36, 36));
        backgroundColorChooserButton.setMinimumSize(new java.awt.Dimension(36, 36));
        backgroundColorChooserButton.setPreferredSize(new java.awt.Dimension(36, 36));
        backgroundColorChooserButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backgroundColorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorChooserButtonActionPerformed(evt);
            }
        });
        toolBar.add(backgroundColorChooserButton);

        smoothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        smoothButton.setToolTipText("Alisar");
        smoothButton.setFocusable(false);
        smoothButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        smoothButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        smoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smoothButtonActionPerformed(evt);
            }
        });
        toolBar.add(smoothButton);

        fillButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        fillButton.setToolTipText("Rellenar");
        fillButton.setFocusable(false);
        fillButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillButtonActionPerformed(evt);
            }
        });
        toolBar.add(fillButton);

        gradientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gradient.png"))); // NOI18N
        gradientButton.setToolTipText("Degradado");
        gradientButton.setFocusable(false);
        gradientButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gradientButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gradientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientButtonActionPerformed(evt);
            }
        });
        toolBar.add(gradientButton);

        gradientTypeComboBox.setMaximumSize(new java.awt.Dimension(31, 24));
        gradientTypeComboBox.setName(""); // NOI18N
        gradientTypeComboBox.setVisible(false);
        gradientTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientTypeComboBoxActionPerformed(evt);
            }
        });
        toolBar.add(gradientTypeComboBox);
        gradientTypeComboBox.getAccessibleContext().setAccessibleName("");

        toolBar.add(sep7);

        alphaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/opacity.png"))); // NOI18N
        alphaButton.setToolTipText("Opacidad");
        alphaButton.setFocusable(false);
        alphaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alphaButton.setMaximumSize(new java.awt.Dimension(36, 36));
        alphaButton.setMinimumSize(new java.awt.Dimension(36, 36));
        alphaButton.setPreferredSize(new java.awt.Dimension(36, 36));
        alphaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alphaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaButtonActionPerformed(evt);
            }
        });
        toolBar.add(alphaButton);

        alphaSlider.setVisible(false);
        alphaSlider.setToolTipText("Opacidad");
        alphaSlider.setValue(100);
        alphaSlider.setInverted(true);
        alphaSlider.setMaximumSize(new java.awt.Dimension(100, 25));
        alphaSlider.setMinimumSize(new java.awt.Dimension(100, 25));
        alphaSlider.setPreferredSize(new java.awt.Dimension(100, 25));
        alphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSliderStateChanged(evt);
            }
        });
        toolBar.add(alphaSlider);
        toolBar.add(sep2);

        strokeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/dashed-line.png"))); // NOI18N
        strokeButton.setToolTipText("Trazo discontínuo");
        strokeButton.setFocusable(false);
        strokeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        strokeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        strokeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strokeButtonActionPerformed(evt);
            }
        });
        toolBar.add(strokeButton);

        strokeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        strokeSpinner.setToolTipText("Grosor");
        strokeSpinner.setMaximumSize(new java.awt.Dimension(45, 20));
        strokeSpinner.setMinimumSize(new java.awt.Dimension(45, 20));
        strokeSpinner.setPreferredSize(new java.awt.Dimension(45, 20));
        strokeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                strokeSpinnerStateChanged(evt);
            }
        });
        toolBar.add(strokeSpinner);
        toolBar.add(sep5);

        vShapeComboBox.setToolTipText("Formas en el lienzo");
        vShapeComboBox.setMaximumSize(new java.awt.Dimension(200, 24));
        vShapeComboBox.setMinimumSize(new java.awt.Dimension(200, 24));
        vShapeComboBox.setPreferredSize(new java.awt.Dimension(200, 24));
        vShapeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vShapeComboBoxActionPerformed(evt);
            }
        });
        toolBar.add(vShapeComboBox);
        toolBar.add(sep8);

        audioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/musical-note.png"))); // NOI18N
        audioButton.setToolTipText("Audio");
        audioButton.setFocusable(false);
        audioButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        audioButton.setMaximumSize(new java.awt.Dimension(36, 36));
        audioButton.setMinimumSize(new java.awt.Dimension(36, 36));
        audioButton.setPreferredSize(new java.awt.Dimension(36, 36));
        audioButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        audioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioButtonActionPerformed(evt);
            }
        });
        toolBar.add(audioButton);

        playButton.setVisible(false);
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        playButton.setToolTipText("Play");
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setMaximumSize(new java.awt.Dimension(36, 36));
        playButton.setMinimumSize(new java.awt.Dimension(36, 36));
        playButton.setPreferredSize(new java.awt.Dimension(36, 36));
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        toolBar.add(playButton);

        stopButton.setVisible(false);
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setMaximumSize(new java.awt.Dimension(36, 36));
        stopButton.setMinimumSize(new java.awt.Dimension(36, 36));
        stopButton.setPreferredSize(new java.awt.Dimension(36, 36));
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        toolBar.add(stopButton);

        audioFilesComboBox.setVisible(false);
        audioFilesComboBox.setToolTipText("Pistas audio");
        audioFilesComboBox.setMaximumSize(new java.awt.Dimension(70, 24));
        audioFilesComboBox.setPreferredSize(new java.awt.Dimension(150, 24));
        toolBar.add(audioFilesComboBox);

        recordButton.setVisible(false);
        recordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        recordButton.setToolTipText("Grabar");
        recordButton.setFocusable(false);
        recordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordButton.setMaximumSize(new java.awt.Dimension(36, 36));
        recordButton.setMinimumSize(new java.awt.Dimension(36, 36));
        recordButton.setPreferredSize(new java.awt.Dimension(36, 36));
        recordButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });
        toolBar.add(recordButton);

        recordingTime.setVisible(false);
        recordingTime.setText("00:00:00");
        recordingTime.setToolTipText("Grabación");
        toolBar.add(recordingTime);
        toolBar.add(sep9);

        mainPanel.add(toolBar, java.awt.BorderLayout.NORTH);

        imageToolBar.setRollover(true);

        brightnessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brightness.png"))); // NOI18N
        brightnessButton.setToolTipText("Brillo");
        brightnessButton.setFocusable(false);
        brightnessButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        brightnessButton.setMaximumSize(new java.awt.Dimension(36, 36));
        brightnessButton.setMinimumSize(new java.awt.Dimension(36, 36));
        brightnessButton.setPreferredSize(new java.awt.Dimension(36, 36));
        brightnessButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        brightnessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(brightnessButton);

        brightnessSlider.setVisible(false);
        brightnessSlider.setMaximum(255);
        brightnessSlider.setMinimum(-255);
        brightnessSlider.setToolTipText("Brillo");
        brightnessSlider.setValue(0);
        brightnessSlider.setMaximumSize(new java.awt.Dimension(100, 16));
        brightnessSlider.setMinimumSize(new java.awt.Dimension(100, 16));
        brightnessSlider.setPreferredSize(new java.awt.Dimension(100, 16));
        brightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnessSliderStateChanged(evt);
            }
        });
        brightnessSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                brightnessSliderMouseReleased(evt);
            }
        });
        imageToolBar.add(brightnessSlider);
        imageToolBar.add(sepp1);

        effectsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/filter.png"))); // NOI18N
        effectsButton.setToolTipText("Filtros");
        effectsButton.setFocusable(false);
        effectsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        effectsButton.setMaximumSize(new java.awt.Dimension(36, 36));
        effectsButton.setMinimumSize(new java.awt.Dimension(36, 36));
        effectsButton.setPreferredSize(new java.awt.Dimension(36, 36));
        effectsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        effectsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effectsButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(effectsButton);

        effectsComboBox.setVisible(false);
        effectsComboBox.setSelectedItem(sm.agm.graficos.ImageFilterType.NONE);
        effectsComboBox.setToolTipText("Filtros");
        effectsComboBox.setMaximumSize(new java.awt.Dimension(150, 24));
        effectsComboBox.setMinimumSize(new java.awt.Dimension(150, 24));
        effectsComboBox.setPreferredSize(new java.awt.Dimension(150, 24));
        effectsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effectsComboBoxActionPerformed(evt);
            }
        });
        imageToolBar.add(effectsComboBox);
        imageToolBar.add(sepp2);

        negativeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negative.png"))); // NOI18N
        negativeButton.setToolTipText("Negativo");
        negativeButton.setFocusable(false);
        negativeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        negativeButton.setMaximumSize(new java.awt.Dimension(36, 36));
        negativeButton.setMinimumSize(new java.awt.Dimension(36, 36));
        negativeButton.setPreferredSize(new java.awt.Dimension(36, 36));
        negativeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        negativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(negativeButton);

        contrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrastButton.setToolTipText("Contraste");
        contrastButton.setFocusable(false);
        contrastButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        contrastButton.setMaximumSize(new java.awt.Dimension(36, 36));
        contrastButton.setMinimumSize(new java.awt.Dimension(36, 36));
        contrastButton.setPreferredSize(new java.awt.Dimension(36, 36));
        contrastButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        contrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(contrastButton);

        lightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        lightButton.setToolTipText("Iluminar");
        lightButton.setFocusable(false);
        lightButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lightButton.setMaximumSize(new java.awt.Dimension(36, 36));
        lightButton.setMinimumSize(new java.awt.Dimension(36, 36));
        lightButton.setPreferredSize(new java.awt.Dimension(36, 36));
        lightButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(lightButton);

        darkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        darkButton.setToolTipText("Oscurecer");
        darkButton.setFocusable(false);
        darkButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        darkButton.setMaximumSize(new java.awt.Dimension(36, 36));
        darkButton.setMinimumSize(new java.awt.Dimension(36, 36));
        darkButton.setPreferredSize(new java.awt.Dimension(36, 36));
        darkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        darkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(darkButton);
        imageToolBar.add(sepp3);

        florButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/flower.png"))); // NOI18N
        florButton.setToolTipText("Flor");
        florButton.setFocusable(false);
        florButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        florButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        florButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                florButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(florButton);

        sobelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sobel.png"))); // NOI18N
        sobelButton.setToolTipText("Sobel");
        sobelButton.setFocusable(false);
        sobelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sobelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sobelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(sobelButton);

        sinusoidalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        sinusoidalButton.setToolTipText("Sinusoidal");
        sinusoidalButton.setFocusable(false);
        sinusoidalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sinusoidalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sinusoidalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinusoidalButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(sinusoidalButton);

        sepiaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepiaButton.setToolTipText("Sepia");
        sepiaButton.setFocusable(false);
        sepiaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sepiaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sepiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(sepiaButton);

        ecualizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        ecualizeButton.setToolTipText("Ecualizar");
        ecualizeButton.setFocusable(false);
        ecualizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ecualizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ecualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizeButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(ecualizeButton);

        chessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/chess.png"))); // NOI18N
        chessButton.setToolTipText("Ajedrizar");
        chessButton.setFocusable(false);
        chessButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chessButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chessButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(chessButton);

        chessApplyButton.setVisible(false);
        chessApplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/horse.png"))); // NOI18N
        chessApplyButton.setToolTipText("Aplicar ajedrizado");
        chessApplyButton.setFocusable(false);
        chessApplyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        chessApplyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        chessApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chessApplyButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(chessApplyButton);

        chessValueLabel.setVisible(false);
        chessValueLabel.setText("2");
        chessValueLabel.setMaximumSize(new java.awt.Dimension(15, 15));
        chessValueLabel.setMinimumSize(new java.awt.Dimension(15, 15));
        chessValueLabel.setPreferredSize(new java.awt.Dimension(15, 15));
        imageToolBar.add(chessValueLabel);

        chessSlider.setVisible(false);
        chessSlider.setMaximum(50);
        chessSlider.setMinimum(2);
        chessSlider.setToolTipText("Nº de divisiones");
        chessSlider.setValue(2);
        chessSlider.setMaximumSize(new java.awt.Dimension(100, 16));
        chessSlider.setMinimumSize(new java.awt.Dimension(100, 16));
        chessSlider.setPreferredSize(new java.awt.Dimension(100, 16));
        chessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chessSliderStateChanged(evt);
            }
        });
        imageToolBar.add(chessSlider);
        chessSlider.getAccessibleContext().setAccessibleDescription("");

        rainbowToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pixels.png"))); // NOI18N
        rainbowToggleButton.setToolTipText("Pixels rainbow");
        rainbowToggleButton.setFocusable(false);
        rainbowToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rainbowToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rainbowToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainbowToggleButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(rainbowToggleButton);

        rainbowTypeComboBox.setVisible(false);
        rainbowTypeComboBox.setSelectedItem(sm.agm.graficos.ImageFilterType.NONE);
        rainbowTypeComboBox.setToolTipText("Espacios de color");
        rainbowTypeComboBox.setMaximumSize(new java.awt.Dimension(75, 24));
        rainbowTypeComboBox.setMinimumSize(new java.awt.Dimension(75, 24));
        rainbowTypeComboBox.setPreferredSize(new java.awt.Dimension(75, 24));
        rainbowTypeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rainbowTypeComboBoxFocusLost(evt);
            }
        });
        rainbowTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainbowTypeComboBoxActionPerformed(evt);
            }
        });
        imageToolBar.add(rainbowTypeComboBox);

        tintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        tintButton.setToolTipText("Tintado");
        tintButton.setFocusable(false);
        tintButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(tintButton);

        tintSlider.setVisible(false);
        tintSlider.setToolTipText("Tintado");
        tintSlider.setMaximumSize(new java.awt.Dimension(100, 16));
        tintSlider.setMinimumSize(new java.awt.Dimension(100, 16));
        tintSlider.setPreferredSize(new java.awt.Dimension(100, 16));
        tintSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tintSliderStateChanged(evt);
            }
        });
        tintSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tintSliderMouseReleased(evt);
            }
        });
        imageToolBar.add(tintSlider);

        tintLabel.setVisible(false);
        tintLabel.setText("0.0");
        imageToolBar.add(tintLabel);
        imageToolBar.add(sepp);

        extractBandsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        extractBandsButton.setToolTipText("Extraer bandas");
        extractBandsButton.setFocusable(false);
        extractBandsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        extractBandsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        extractBandsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractBandsButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(extractBandsButton);

        bandsCombobox.setSelectedItem(sm.agm.graficos.ImageFilterType.NONE);
        bandsCombobox.setToolTipText("Espacios de color");
        bandsCombobox.setMaximumSize(new java.awt.Dimension(75, 24));
        bandsCombobox.setMinimumSize(new java.awt.Dimension(75, 24));
        bandsCombobox.setPreferredSize(new java.awt.Dimension(75, 24));
        bandsCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandsComboboxActionPerformed(evt);
            }
        });
        imageToolBar.add(bandsCombobox);
        imageToolBar.add(sepp5);

        rotateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotate.png"))); // NOI18N
        rotateButton.setToolTipText("Rotar libremente");
        rotateButton.setFocusable(false);
        rotateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotateButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rotateButton.setMaximumSize(new java.awt.Dimension(36, 36));
        rotateButton.setMinimumSize(new java.awt.Dimension(36, 36));
        rotateButton.setPreferredSize(new java.awt.Dimension(36, 36));
        rotateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(rotateButton);

        rotationSlider.setVisible(false);
        rotationSlider.setMaximum(360);
        rotationSlider.setMinimum(-360);
        rotationSlider.setToolTipText("Rotar imagen");
        rotationSlider.setValue(0);
        rotationSlider.setMaximumSize(new java.awt.Dimension(150, 25));
        rotationSlider.setMinimumSize(new java.awt.Dimension(150, 25));
        rotationSlider.setPreferredSize(new java.awt.Dimension(150, 25));
        rotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotationSliderStateChanged(evt);
            }
        });
        rotationSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rotationSliderMouseReleased(evt);
            }
        });
        imageToolBar.add(rotationSlider);

        rotate90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotate90Button.setToolTipText("Rotar 90º");
        rotate90Button.setFocusable(false);
        rotate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate90Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rotate90Button.setMaximumSize(new java.awt.Dimension(36, 36));
        rotate90Button.setMinimumSize(new java.awt.Dimension(36, 36));
        rotate90Button.setPreferredSize(new java.awt.Dimension(36, 36));
        rotate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate90ButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(rotate90Button);

        rotate180Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotate180Button.setToolTipText("Rotar 180º");
        rotate180Button.setFocusable(false);
        rotate180Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate180Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rotate180Button.setMaximumSize(new java.awt.Dimension(36, 36));
        rotate180Button.setMinimumSize(new java.awt.Dimension(36, 36));
        rotate180Button.setPreferredSize(new java.awt.Dimension(36, 36));
        rotate180Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate180ButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(rotate180Button);

        rotate270Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rotate270Button.setToolTipText("Rotar 270º");
        rotate270Button.setFocusable(false);
        rotate270Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate270Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rotate270Button.setMaximumSize(new java.awt.Dimension(36, 36));
        rotate270Button.setMinimumSize(new java.awt.Dimension(36, 36));
        rotate270Button.setPreferredSize(new java.awt.Dimension(36, 36));
        rotate270Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotate270Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate270ButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(rotate270Button);
        imageToolBar.add(sepp4);

        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        zoomInButton.setToolTipText("+ Zoom");
        zoomInButton.setFocusable(false);
        zoomInButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        zoomInButton.setMaximumSize(new java.awt.Dimension(36, 36));
        zoomInButton.setMinimumSize(new java.awt.Dimension(36, 36));
        zoomInButton.setPreferredSize(new java.awt.Dimension(36, 36));
        zoomInButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(zoomInButton);

        zoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        zoomOutButton.setToolTipText("- Zoom");
        zoomOutButton.setFocusable(false);
        zoomOutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        zoomOutButton.setMaximumSize(new java.awt.Dimension(36, 36));
        zoomOutButton.setMinimumSize(new java.awt.Dimension(36, 36));
        zoomOutButton.setPreferredSize(new java.awt.Dimension(36, 36));
        zoomOutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(zoomOutButton);
        imageToolBar.add(sepp6);

        umbralButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/umbral.png"))); // NOI18N
        umbralButton.setToolTipText("Umbralización");
        umbralButton.setFocusable(false);
        umbralButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        umbralButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        umbralButton.setMaximumSize(new java.awt.Dimension(36, 36));
        umbralButton.setMinimumSize(new java.awt.Dimension(36, 36));
        umbralButton.setPreferredSize(new java.awt.Dimension(36, 36));
        umbralButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        umbralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umbralButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(umbralButton);

        umbralSlider.setVisible(false);
        umbralSlider.setMaximum(255);
        umbralSlider.setToolTipText("Umbralización");
        umbralSlider.setValue(128);
        umbralSlider.setMaximumSize(new java.awt.Dimension(150, 25));
        umbralSlider.setMinimumSize(new java.awt.Dimension(150, 25));
        umbralSlider.setPreferredSize(new java.awt.Dimension(150, 25));
        umbralSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralSliderStateChanged(evt);
            }
        });
        umbralSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                umbralSliderMouseReleased(evt);
            }
        });
        imageToolBar.add(umbralSlider);
        imageToolBar.add(sep6);

        addImgButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/add.png"))); // NOI18N
        addImgButton.setToolTipText("Sumar imagen");
        addImgButton.setFocusable(false);
        addImgButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addImgButton.setMaximumSize(new java.awt.Dimension(36, 36));
        addImgButton.setMinimumSize(new java.awt.Dimension(36, 36));
        addImgButton.setPreferredSize(new java.awt.Dimension(36, 36));
        addImgButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImgButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(addImgButton);

        subtractImgButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/subtract.png"))); // NOI18N
        subtractImgButton.setToolTipText("Restar imagen");
        subtractImgButton.setFocusable(false);
        subtractImgButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        subtractImgButton.setMaximumSize(new java.awt.Dimension(36, 36));
        subtractImgButton.setMinimumSize(new java.awt.Dimension(36, 36));
        subtractImgButton.setPreferredSize(new java.awt.Dimension(36, 36));
        subtractImgButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        subtractImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractImgButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(subtractImgButton);

        multiplyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/multiply.png"))); // NOI18N
        multiplyButton.setToolTipText("Multiplicar imagen");
        multiplyButton.setFocusable(false);
        multiplyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        multiplyButton.setMaximumSize(new java.awt.Dimension(36, 36));
        multiplyButton.setMinimumSize(new java.awt.Dimension(36, 36));
        multiplyButton.setPreferredSize(new java.awt.Dimension(36, 36));
        multiplyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        multiplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(multiplyButton);

        divideButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/divide.png"))); // NOI18N
        divideButton.setToolTipText("Dividir imagen");
        divideButton.setFocusable(false);
        divideButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        divideButton.setMaximumSize(new java.awt.Dimension(36, 36));
        divideButton.setMinimumSize(new java.awt.Dimension(36, 36));
        divideButton.setPreferredSize(new java.awt.Dimension(36, 36));
        divideButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        divideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideButtonActionPerformed(evt);
            }
        });
        imageToolBar.add(divideButton);

        mainPanel.add(imageToolBar, java.awt.BorderLayout.PAGE_END);

        desktopPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        desktopPanel.setLayout(new java.awt.BorderLayout());

        desktop.setBackground(new java.awt.Color(102, 102, 102));
        desktopPanel.add(desktop, java.awt.BorderLayout.CENTER);

        mainPanel.add(desktopPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        nuevoArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoArchivo.setText("Nuevo");
        nuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoActionPerformed(evt);
            }
        });
        menuArchivo.add(nuevoArchivo);

        abrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirArchivo.setText("Abrir");
        abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoActionPerformed(evt);
            }
        });
        menuArchivo.add(abrirArchivo);

        guardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarArchivo.setText("Guardar");
        guardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoActionPerformed(evt);
            }
        });
        menuArchivo.add(guardarArchivo);

        menuBar.add(menuArchivo);

        menuEdicion.setText("Ver");

        toggleBarraEstado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        toggleBarraEstado.setSelected(true);
        toggleBarraEstado.setText("Barra de estado");
        toggleBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBarraEstadoActionPerformed(evt);
            }
        });
        menuEdicion.add(toggleBarraEstado);

        toggleBarraDibujo.setSelected(true);
        toggleBarraDibujo.setText("Barra de dibujo/sonido");
        toggleBarraDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBarraDibujoActionPerformed(evt);
            }
        });
        menuEdicion.add(toggleBarraDibujo);

        toggleBarraImagen.setSelected(true);
        toggleBarraImagen.setText("Barra de imagen");
        toggleBarraImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBarraImagenActionPerformed(evt);
            }
        });
        menuEdicion.add(toggleBarraImagen);

        menuBar.add(menuEdicion);

        menuImagen.setText("Imagen");

        changeNewCanvasSize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        changeNewCanvasSize.setText("Cambiar tamaño nuevo lienzo");
        changeNewCanvasSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNewCanvasSizeActionPerformed(evt);
            }
        });
        menuImagen.add(changeNewCanvasSize);

        deleteSelected.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteSelected.setText("Eliminar selección");
        deleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });
        menuImagen.add(deleteSelected);

        menuBar.add(menuImagen);

        menuAbout.setText("Ayuda");

        about.setText("Acerca de");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        menuAbout.add(about);

        menuBar.add(menuAbout);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obtiene la ventana interna actual, almacenando en la anterior la que se deja de usar.
     */
    protected void setCurrentWindow() {
        lastWindow = currentWindow;
        currentWindow = (VentanaInterna) desktop.getSelectedFrame();
    }
    
    /**
     * Asigna las dimensiones de la nueva ventana a crear
     * @param width Ancho de la ventana
     * @param height Alto de la ventana
     */
    private void setInternalCanvasWidthAndHeight(int width, int height) {
        internalCanvasHeight = height;
        internalCanvasWidth = width;
        
        internalWindowWidth = (int) (internalCanvasWidth * sizeFactor);
        internalWindowHeight = (int) (internalCanvasHeight * sizeFactor);
    }
    
    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        changeNewCanvasSizeActionPerformed(evt);
        
        String name = "Sin título - " + windowIndexAux;
        BufferedImage img = new BufferedImage(internalCanvasWidth, internalCanvasHeight, BufferedImage.TYPE_INT_ARGB);
        createWindow(name, internalWindowWidth, internalWindowHeight, img);
        if (currentWindow != null) currentWindow.getLienzo().addLienzoListener(new LienzoAdapter());
    }//GEN-LAST:event_nuevoArchivoActionPerformed

    private void createWindow(String title, int width, int height, BufferedImage img) {
        if (windowIndex > 5)
            windowIndex = 1;
        
        VentanaInterna vi = new VentanaInterna(this);
        desktop.add(vi);
        
        vi.setTitle(title);
        vi.setSize(width, height);
        vi.setLocation(windowIndex * 15, windowIndex * 15);
        vi.setVisible(true);
        if(img != null) vi.getLienzo().setImg(img);

        windowIndex += 1;
        windowIndexAux += 1;
        currentWindow = vi;        

        deactivateTools();
        updateToolLabel();
    }
    
    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
        JFileChooser dialog = new JFileChooser();
        dialog.addChoosableFileFilter(new FileNameExtensionFilter("Imagen (PNG, JPG, JPEG, BMP)", "png", "jpg", "jpeg", "bmp"));
        dialog.addChoosableFileFilter(new FileNameExtensionFilter("Audio (WAV, AU, WAVE)", "wav", "au", "wave"));
        
        int answ = dialog.showOpenDialog(this);
        if (answ == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dialog.getSelectedFile();
                if ("wav".equals(f.getName().split("\\.")[1]) || "au".equals(f.getName().split("\\.")[1]) || "wave".equals(f.getName().split("\\.")[1])) {
                    File ff = new File(dialog.getSelectedFile().getPath()) {
                    @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    audioFilesComboBox.addItem(ff);
                } else {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna(this);
                    vi.getLienzo().setImg(img);
                    vi.getLienzo().setDrawing(false);
                    desktop.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                    vi.getLienzo().addLienzoListener(new LienzoAdapter());
                    currentWindow = vi;
                }
            } catch (IOException ex) {
                System.err.println("Error al abrir la imagen.");
            }
            
        }    
    }//GEN-LAST:event_abrirArchivoActionPerformed

    private void pencilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencilButtonActionPerformed
        changeTool(Tool.POINT);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(false);
    }//GEN-LAST:event_pencilButtonActionPerformed

    private void toggleBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBarraEstadoActionPerformed
        statusPanel.setVisible(!statusPanel.isVisible());
    }//GEN-LAST:event_toggleBarraEstadoActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        changeTool(Tool.LINE);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(false);
    }//GEN-LAST:event_lineButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        changeTool(Tool.RECTANGLE);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void ellipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseButtonActionPerformed
        changeTool(Tool.ELLIPSE);
        backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_ellipseButtonActionPerformed

    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
        if (currentWindow != null) {
            JFileChooser dialog = new JFileChooser();
            dialog.setName(currentWindow.getTitle());
            dialog.addChoosableFileFilter(new FileNameExtensionFilter("Imagen (PNG, JPG, JPEG, BMP)", "png", "jpg", "jpeg", "bmp"));
            dialog.addChoosableFileFilter(new FileNameExtensionFilter("Audio (WAV, AU)", "wav", "au"));
            
            int answ = dialog.showSaveDialog(this);
            if (answ == JFileChooser.APPROVE_OPTION) {
                try {
                    currentWindow.getLienzo().deselectCurrentShape();
                    BufferedImage img = currentWindow.getLienzo().getImg(true);
                    if (img != null) {
                        File f = dialog.getSelectedFile();
                        ImageIO.write(img, f.getName().split("\\.")[1], f);
                        currentWindow.setTitle(f.getName());
                    }
                } catch (IOException ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_guardarArchivoActionPerformed

    private void smoothButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothButtonActionPerformed
        currentAtributes.setSmooth(true);
        
        if (currentWindow != null) {
            if (currentWindow.getLienzo().thereIsCurrentShape())
                currentWindow.getLienzo().getCurrentShapeAtributes().setSmooth(smoothButton.isSelected());
            
            currentWindow.getLienzo().repaint();
        } else {
            smoothButton.setSelected(false);
        }
    }//GEN-LAST:event_smoothButtonActionPerformed

    private void fillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillButtonActionPerformed
        currentAtributes.setFill(true);
        
        if (currentWindow != null) {
            if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes) {
                ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setFill(fillButton.isSelected());
                ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setGradient(false);
            }
            
            gradientButton.setSelected(false);
            currentWindow.getLienzo().repaint();
        } else {
            fillButton.setSelected(false);
            gradientButton.setSelected(false);
        }
    }//GEN-LAST:event_fillButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (currentWindow != null) {
            if (!currentWindow.getLienzo().edit()) {
                currentWindow.getLienzo().setEdit(editButton.isSelected());
                changeTool(Tool.NONE);
            } else {
                currentWindow.getLienzo().setEdit(false);
                changeTool(Tool.NONE);
            }
            
            if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes)
                backgroundColorChooserButton.setVisible(true);
        } else deactivateTools();
    }//GEN-LAST:event_editButtonActionPerformed

    private void strokeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_strokeSpinnerStateChanged
        currentAtributes.setStrokeSize((int) strokeSpinner.getValue());
        
        if (currentWindow != null) {
            if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof SimpleShapeAtributes)
                ((SimpleShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setStrokeSize((int) strokeSpinner.getValue());
            if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes)
                ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setStrokeSize((int) strokeSpinner.getValue());
            
            currentWindow.getLienzo().repaint();
        }  
    }//GEN-LAST:event_strokeSpinnerStateChanged

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        nuevoArchivoActionPerformed(evt);
    }//GEN-LAST:event_newButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        abrirArchivoActionPerformed(evt);
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        guardarArchivoActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void roundRectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundRectangleButtonActionPerformed
        changeTool(Tool.ROUNDRECTANGLE);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_roundRectangleButtonActionPerformed

    private void arcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arcButtonActionPerformed
        changeTool(Tool.ARC);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_arcButtonActionPerformed

    private void quadCurveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quadCurveButtonActionPerformed
        changeTool(Tool.QUADCURVE);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_quadCurveButtonActionPerformed

    private void cubicCurveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cubicCurveButtonActionPerformed
        changeTool(Tool.CUBICCURVE);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(true);
    }//GEN-LAST:event_cubicCurveButtonActionPerformed

    private void pathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathButtonActionPerformed
        changeTool(Tool.PATH);
        if (currentWindow != null) backgroundColorChooserButton.setVisible(false);
    }//GEN-LAST:event_pathButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteCurrentSelection();
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Elimina la figura que actualmente está seleccionada.
     */
    private void deleteCurrentSelection() {
        // Si hay ventana actual
        if (currentWindow != null) {
            // Si hay figura seleccionada
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                // Borro del lienzo y del combobox
                currentWindow.getLienzo().deleteCurrentShape();
                vShapeComboBox.removeItem(vShapeComboBox.getSelectedItem());
            }
            currentWindow.getLienzo().repaint();
        }
    }
    
    /**
     * Actualiza las figuras de la lista desplegable. Usado cada vez que se cambia de ventana.
     * @param v VentanaInterna con un lienzo con las nuevas figuras
     */
    protected void updatevShapeCombobox(VentanaInterna v) {
        // Elimino todas las figuras del listado
        vShapeComboBox.removeAllItems();
        
        // Agrego nuevas figuras
        for (Shape s: v.getLienzo().getvShape())
            ((DefaultComboBoxModel) vShapeComboBox.getModel()).addElement((AGShape) s);
    }
    
    /**
     * Actualiza el botón del trazado.
     */
    protected void updateStrokeButton() {
        SimpleShapeAtributes ca = null;
        if (currentWindow.getLienzo().thereIsCurrentShape()) 
            ca = (SimpleShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes();

        if (ca instanceof SimpleShapeAtributes) {
            if (strokeButton.isSelected()) {
                    if (ca.getStrokeType() == StrokeType.LINE) ca.setStroke(StrokeType.DASHED);
            } else ca.setStroke(StrokeType.LINE);
        }
    }    
    
    private void strokeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strokeButtonActionPerformed
        if (currentWindow != null) {
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                updateStrokeButton();
            }
            currentWindow.getLienzo().repaint();
        } else {
            strokeButton.setSelected(false);
        }
    }//GEN-LAST:event_strokeButtonActionPerformed

    private void gradientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientButtonActionPerformed
        if (currentWindow != null) {            
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes) {
                    if (gradientButton.isSelected()) gradientTypeComboBox.setVisible(true);
                    else gradientTypeComboBox.setVisible(false);
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).createGradient(currentWindow.getLienzo().getCurrentShapeBounds());
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setGradient(gradientButton.isSelected());
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setFill(false);
                    
                    currentAtributes.createGradient(currentWindow.getLienzo().getCurrentShapeBounds());
                    currentAtributes.setGradient(gradientButton.isSelected());
                    currentAtributes.setFill(false);
                } else {
                    gradientButton.setSelected(false);
                }
            } else {
                gradientButton.setSelected(false);
            }
            
            fillButton.setSelected(false);
            currentWindow.getLienzo().repaint();
        } else {
            fillButton.setSelected(false);
            gradientButton.setSelected(false);
        }
    }//GEN-LAST:event_gradientButtonActionPerformed

    private void alphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSliderStateChanged
        currentAtributes.setAlpha((float)alphaSlider.getValue() / 100);
        
        if (currentWindow != null) {
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                currentWindow.getLienzo().getCurrentShapeAtributes().setAlpha((float)alphaSlider.getValue() / 100);
            }
            
            currentWindow.getLienzo().repaint();
        }
    }//GEN-LAST:event_alphaSliderStateChanged

    private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
        deleteCurrentSelection();
    }//GEN-LAST:event_deleteSelectedActionPerformed

    private void gradientTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientTypeComboBoxActionPerformed
        if (currentWindow != null) {
            if (currentWindow.getLienzo().thereIsCurrentShape())
                if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes) {
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setGradientType((GradientType) gradientTypeComboBox.getSelectedItem());
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).createGradient(currentWindow.getLienzo().getCurrentShapeBounds());
                    
                    currentAtributes.setGradientType((GradientType) gradientTypeComboBox.getSelectedItem());
                    currentAtributes.createGradient(currentWindow.getLienzo().getCurrentShapeBounds());
                }

            currentWindow.getLienzo().repaint();
        }
    }//GEN-LAST:event_gradientTypeComboBoxActionPerformed

    private void changeNewCanvasSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNewCanvasSizeActionPerformed
        CanvasSize dialog = new CanvasSize(this, true);
        dialog.setVisible(true);
        setInternalCanvasWidthAndHeight(dialog.getCanvasWidth(), dialog.getCanvasHeight());
    }//GEN-LAST:event_changeNewCanvasSizeActionPerformed

    private void brightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightnessSliderStateChanged
        if (currentWindow != null) {
            currentWindow.getLienzo().applyBrightness(brightnessSlider.getValue());
        }
        
        desktop.repaint();
    }//GEN-LAST:event_brightnessSliderStateChanged

    private void effectsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effectsComboBoxActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().applyFilter((ImageFilterType) effectsComboBox.getSelectedItem());
        }
        
        desktop.repaint();
    }//GEN-LAST:event_effectsComboBoxActionPerformed

    private void contrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_SFUNCION);
        }
        
        desktop.repaint();
    }//GEN-LAST:event_contrastButtonActionPerformed

    private void lightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_LOGARITHM);
        }
        
        desktop.repaint();
    }//GEN-LAST:event_lightButtonActionPerformed

    private void darkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_POWER);
        }
        
        desktop.repaint();
    }//GEN-LAST:event_darkButtonActionPerformed

    private void negativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().applyContrast(LookupTableProducer.TYPE_NEGATIVE);
        
        desktop.repaint();
    }//GEN-LAST:event_negativeButtonActionPerformed

    private void rotate90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate90ButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().rotateImage(90);
            currentWindow.getLienzo().updateCopy();
        }
        
        desktop.repaint();
    }//GEN-LAST:event_rotate90ButtonActionPerformed

    private void rotate180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate180ButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().rotateImage(180);
            currentWindow.getLienzo().updateCopy();
        }
        
        desktop.repaint();
    }//GEN-LAST:event_rotate180ButtonActionPerformed

    private void rotate270ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate270ButtonActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().rotateImage(270);
            currentWindow.getLienzo().updateCopy();
        }
        
        desktop.repaint();
    }//GEN-LAST:event_rotate270ButtonActionPerformed

    private void rotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSliderStateChanged
        if (currentWindow != null)
            currentWindow.getLienzo().rotateImage(rotationSlider.getValue());
        
        desktop.repaint();
    }//GEN-LAST:event_rotationSliderStateChanged

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().scaleImage(1.75f);
        
        desktop.repaint();
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().scaleImage(0.75f);
        
        desktop.repaint();
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void sinusoidalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinusoidalButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().sinFunction();
        
        desktop.repaint();
    }//GEN-LAST:event_sinusoidalButtonActionPerformed

    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateButtonActionPerformed
        if (currentWindow != null) {
            BufferedImage img = currentWindow.getLienzo().getImg(true);
            VentanaInterna vi = new VentanaInterna(this);
            desktop.add(vi);
            vi.getLienzo().setImg(img);
            vi.getLienzo().setDrawing(false);
            vi.setTitle(currentWindow.getTitle());
            vi.setVisible(true);
        }       
    }//GEN-LAST:event_duplicateButtonActionPerformed

    private void extractBandsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractBandsButtonActionPerformed
        if (currentWindow != null) {
            ArrayList<BufferedImage> imgs = currentWindow.getLienzo().extractBands(currentWindow.getLienzo().getColorSpaceType());
            String title = currentWindow.getTitle();
            for (int i = 0; i < imgs.size(); ++i) {
                VentanaInterna vi = new VentanaInterna(this);
                desktop.add(vi);
                vi.getLienzo().setImg(imgs.get(i));
                vi.getLienzo().setDrawing(false);
                vi.setTitle(title + " - [Banda " + i + "]");
                vi.setVisible(true);
            }
        }
    }//GEN-LAST:event_extractBandsButtonActionPerformed

    private void bandsComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandsComboboxActionPerformed
        if (currentWindow != null) {
            BufferedImage output = currentWindow.getLienzo().changeColorSpace((ColorSpaceType) bandsCombobox.getSelectedItem());
            if (output != null) {
                String title = currentWindow.getTitle();
                VentanaInterna vi = new VentanaInterna(this);
                desktop.add(vi);
                vi.getLienzo().setImg(output);
                vi.getLienzo().setDrawing(false);
                vi.setTitle(title + " - [" + bandsCombobox.getSelectedItem().toString() + "]");
                vi.setVisible(true);
            }
        }
    }//GEN-LAST:event_bandsComboboxActionPerformed

    private void brightnessSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brightnessSliderMouseReleased
        if (currentWindow != null)
            currentWindow.getLienzo().updateCopy();
        
        desktop.repaint();
    }//GEN-LAST:event_brightnessSliderMouseReleased

    private void rotationSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotationSliderMouseReleased
        if (currentWindow != null)
            currentWindow.getLienzo().updateCopy();
        
        desktop.repaint();
    }//GEN-LAST:event_rotationSliderMouseReleased

    private void tintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintButtonActionPerformed
        if (currentWindow != null) {
            tintSlider.setVisible(!tintSlider.isVisible());
            tintLabel.setVisible(!tintLabel.isVisible());
        }
        
        desktop.repaint();
    }//GEN-LAST:event_tintButtonActionPerformed

    private void sepiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().sepia();
        
        desktop.repaint();
    }//GEN-LAST:event_sepiaButtonActionPerformed

    private void ecualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizeButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().equalize();
        
        desktop.repaint();
    }//GEN-LAST:event_ecualizeButtonActionPerformed

    private void umbralSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralSliderStateChanged
        if (currentWindow != null)
            currentWindow.getLienzo().umbralizar(umbralSlider.getValue());
        
        desktop.repaint();
    }//GEN-LAST:event_umbralSliderStateChanged

    private void umbralSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_umbralSliderMouseReleased
        if (currentWindow != null)
            currentWindow.getLienzo().updateCopy();
        
        desktop.repaint();
    }//GEN-LAST:event_umbralSliderMouseReleased

    private void tintSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tintSliderStateChanged
        if (currentWindow != null) {
            float value = (float) (tintSlider.getValue() / 100f);
            currentWindow.getLienzo().tint(currentAtributes.getStrokeColor(), value);
            tintLabel.setText("" + value);
        }
        
        desktop.repaint();
    }//GEN-LAST:event_tintSliderStateChanged

    private void brightnessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessButtonActionPerformed
        if (currentWindow != null)
            brightnessSlider.setVisible(!brightnessSlider.isVisible());
    }//GEN-LAST:event_brightnessButtonActionPerformed

    private void rotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateButtonActionPerformed
        if (currentWindow != null)
            rotationSlider.setVisible(!rotationSlider.isVisible());
    }//GEN-LAST:event_rotateButtonActionPerformed

    private void effectsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effectsButtonActionPerformed
        if (currentWindow != null)
            effectsComboBox.setVisible(!effectsComboBox.isVisible());
    }//GEN-LAST:event_effectsButtonActionPerformed

    private void umbralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umbralButtonActionPerformed
        if (currentWindow != null)
            umbralSlider.setVisible(!umbralSlider.isVisible());
    }//GEN-LAST:event_umbralButtonActionPerformed

    private void alphaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaButtonActionPerformed
        if (currentWindow != null)
            alphaSlider.setVisible(!alphaSlider.isVisible());
    }//GEN-LAST:event_alphaButtonActionPerformed

    private void addImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImgButtonActionPerformed
        if (currentWindow != null){
            if (lastWindow != null) {
                BufferedImage output = currentWindow.getLienzo().add(lastWindow.getLienzo().getImg(false));
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo().setImg(output);
                vi.getLienzo().setDrawing(false);
                vi.setTitle(lastWindow.getTitle() + " + " + currentWindow.getTitle() + " [+]");
                desktop.add(vi);
                vi.setVisible(true);
            }
        }
        
        desktop.repaint();
    }//GEN-LAST:event_addImgButtonActionPerformed

    private void subtractImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractImgButtonActionPerformed
        if (currentWindow != null){
            if (lastWindow != null) {
                BufferedImage imgright = lastWindow.getLienzo().getImg(false);
                BufferedImage output = currentWindow.getLienzo().subtract(imgright);
                
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo().setImg(output);
                vi.setTitle(lastWindow.getTitle() + " - " + currentWindow.getTitle() + " [-]");
                desktop.add(vi);
                vi.setVisible(true);
            }
        }
        
        desktop.repaint();
    }//GEN-LAST:event_subtractImgButtonActionPerformed

    private void sobelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().sobel();
        
        desktop.repaint();
    }//GEN-LAST:event_sobelButtonActionPerformed

    private void multiplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyButtonActionPerformed
        if (currentWindow != null){
            if (lastWindow != null) {
                BufferedImage imgright = lastWindow.getLienzo().getImg(false);
                BufferedImage output = currentWindow.getLienzo().multiply(imgright);
                
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo().setImg(output);
                vi.setTitle(lastWindow.getTitle() + " - " + currentWindow.getTitle() + " [*]");
                desktop.add(vi);
                vi.setVisible(true);
            }
        }
        
        desktop.repaint();
    }//GEN-LAST:event_multiplyButtonActionPerformed

    private void divideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideButtonActionPerformed
        if (currentWindow != null){
            if (lastWindow != null) {
                BufferedImage imgright = lastWindow.getLienzo().getImg(false);
                BufferedImage output = currentWindow.getLienzo().divide(imgright);
                
                VentanaInterna vi = new VentanaInterna(this);
                vi.getLienzo().setImg(output);
                vi.setTitle(lastWindow.getTitle() + " - " + currentWindow.getTitle() + " [/]");
                desktop.add(vi);
                vi.setVisible(true);
            }
        }
        
        desktop.repaint();
    }//GEN-LAST:event_divideButtonActionPerformed

//    AUDIO   ####################################
    
    /**
     * Clase interna AudioManager
     * Usada para manejar los eventos del audio
     */
    class AudioManager implements LineListener {

        @Override
        public void update(LineEvent evt) {
            if (evt.getType() == LineEvent.Type.START) { playButton.setEnabled(false); }
            if (evt.getType() == LineEvent.Type.STOP) { playButton.setEnabled(true); }
        }
    }
    
    /**
     * Convierte un número a string.
     */
    private String nts(int n) {
        String s;
        if (n >= 0 && n <= 9) s = "0" + n;
        else s = "" + n;
        
        return s;
    }
    
    /**
     * Actualiza la etiqueta con el tiempo de grabación
     */
    private void recordingTime() {
        recordingSeconds += 1;
        
        int horas = recordingSeconds / 3600;
        int minutos = (recordingSeconds % 3600) / 60;
        int segundos = recordingSeconds % 60;
        
        recordingTime.setText(nts(horas) + ":" + nts(minutos) + ":" + nts(segundos));
    }  
    
    private void audioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioButtonActionPerformed
        playButton.setVisible(!playButton.isVisible());
        stopButton.setVisible(!stopButton.isVisible());
        recordButton.setVisible(!recordButton.isVisible());
        audioFilesComboBox.setVisible(!audioFilesComboBox.isVisible());
        recordingTime.setVisible(!recordingTime.isVisible());
    }//GEN-LAST:event_audioButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        File f = (File) audioFilesComboBox.getSelectedItem();
        if (f != null){
            player = new SMClipPlayer(f);
            ((SMClipPlayer) player).addLineListener(new AudioManager());
            if (player != null) {
                player.play();
            }
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (player != null) {
            player.stop();
        }
        
        if (recording) {
            if (recorder != null) {
                recorder.record();
                recording = false;
            }
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
        if (recorder != null) {
            recorder.stop();
            recording = false;
            recorder = null;
            recordingTime.setText("00:00:00");
        } else {
            recorder = new SMSoundRecorder((File) audioFilesComboBox.getSelectedItem());

            if (recorder != null) {
                recorder.record();
                recording = true;
            }

            crono = new Thread(() -> {
                while (recording) {
                    recordingTime();
                    
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            
            crono.start();
        }
    }//GEN-LAST:event_recordButtonActionPerformed

    private void colorChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserButtonActionPerformed
        if (currentWindow != null){
            Color c = JColorChooser.showDialog(null, "Selecciona un color", Color.WHITE);
            currentAtributes.setStrokeColor(c);
            colorChooserButton.setBackground(c);
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                currentWindow.getLienzo().getCurrentShapeAtributes().setStrokeColor(c);

                if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes) {
                    if (((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).gradient())
                        ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).updateGradient();
                }
            }
            currentWindow.repaint();
        }
    }//GEN-LAST:event_colorChooserButtonActionPerformed

    private void backgroundColorChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorChooserButtonActionPerformed
        if (currentWindow != null){
            Color c = JColorChooser.showDialog(null, "Selecciona un color", Color.WHITE);
            currentAtributes.setBackgroundColor(c);
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                if (currentWindow.getLienzo().getCurrentShapeAtributes() instanceof ComplexShapeAtributes) {
                    backgroundColorChooserButton.setBackground(c);
                    ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).setBackgroundColor(c);
                    if (((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).gradient())
                        ((ComplexShapeAtributes) currentWindow.getLienzo().getCurrentShapeAtributes()).updateGradient();
                }   
            }
        }
        
        currentWindow.repaint();
    }//GEN-LAST:event_backgroundColorChooserButtonActionPerformed

    private void vShapeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vShapeComboBoxActionPerformed
        if (currentWindow != null) {
            currentWindow.getLienzo().notifyShapeSelectedEvent((AGShape) vShapeComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_vShapeComboBoxActionPerformed

    private void inputXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputXActionPerformed
        if (currentWindow != null){
            if (currentWindow.getLienzo().thereIsCurrentShape()) {
                try {
                    int x = Integer.parseInt(inputX.getText());
                    int y = Integer.parseInt(inputY.getText());
                    
                    ((AGShape) currentWindow.getLienzo().getCurrentShape()).setLocation(new Point(x, y));
                } catch (NumberFormatException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
        currentWindow.repaint();
    }//GEN-LAST:event_inputXActionPerformed

    private void inputYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputYActionPerformed
        inputXActionPerformed(evt);
    }//GEN-LAST:event_inputYActionPerformed

    private void tintSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tintSliderMouseReleased
        if (currentWindow != null)
            currentWindow.getLienzo().updateCopy();
        
        desktop.repaint();
    }//GEN-LAST:event_tintSliderMouseReleased

    private void florButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_florButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().florFunction();
        
        desktop.repaint();
    }//GEN-LAST:event_florButtonActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        new AboutWindow(this, true).setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void toggleBarraDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBarraDibujoActionPerformed
        toolBar.setVisible(!toolBar.isVisible());
    }//GEN-LAST:event_toggleBarraDibujoActionPerformed

    private void toggleBarraImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBarraImagenActionPerformed
        imageToolBar.setVisible(!imageToolBar.isVisible());
    }//GEN-LAST:event_toggleBarraImagenActionPerformed

    private void rainbowToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainbowToggleButtonActionPerformed
        if (currentWindow != null)
            rainbowTypeComboBox.setVisible(!rainbowTypeComboBox.isVisible());
        
        desktop.repaint();
    }//GEN-LAST:event_rainbowToggleButtonActionPerformed

    private void rainbowTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainbowTypeComboBoxActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().setRainbowType((RainbowType) rainbowTypeComboBox.getSelectedItem());
        
        desktop.repaint();
    }//GEN-LAST:event_rainbowTypeComboBoxActionPerformed

    private void rainbowTypeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rainbowTypeComboBoxFocusLost
        if (currentWindow != null)
            currentWindow.getLienzo().updateCopy();
                
        desktop.repaint();
    }//GEN-LAST:event_rainbowTypeComboBoxFocusLost

    private void chessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chessButtonActionPerformed
        if (currentWindow != null) {
            chessSlider.setVisible(!chessSlider.isVisible());
            chessApplyButton.setVisible(!chessApplyButton.isVisible());
            chessValueLabel.setVisible(!chessValueLabel.isVisible());
        }
                
        desktop.repaint();
    }//GEN-LAST:event_chessButtonActionPerformed

    private void chessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chessSliderStateChanged
        if (currentWindow != null) {
            chessSides = chessSlider.getValue();
            chessValueLabel.setText("" + chessSides);
        }
    }//GEN-LAST:event_chessSliderStateChanged

    private void chessApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chessApplyButtonActionPerformed
        if (currentWindow != null)
            currentWindow.getLienzo().chess(chessSides);
                
        desktop.repaint();
    }//GEN-LAST:event_chessApplyButtonActionPerformed

    /**
     * Desactiva todas las herramientas (botones)
     */
    public void deactivateTools() {
        grupoHerramientas.clearSelection();
    }
    
    /**
     * Cambia de herramienta
     */
    private void changeTool(Tool tool) {
        // Obtengo ventana actual
        setCurrentWindow();
        
        // Si no es nula
        if (currentWindow != null) {
            // Oculto boton gradiente
            gradientTypeComboBox.setVisible(false);
            // Reseteo drawstep (dibujado de formas compuestas)
            currentWindow.getLienzo().resetDrawStep();
            // Deselecciono forma actual
            currentWindow.getLienzo().deselectCurrentShape();
            repaint();
            
            // Almaceno si estaba editando
            boolean wasEditing = currentWindow.getLienzo().edit();
            
            // Si se cambia de herramienta no se puede editar
            currentWindow.getLienzo().setEdit(false);
            
            // Ninguna herramienta por defecto
            currentWindow.getLienzo().setTool(Tool.NONE);
            
            // Activo herramienta
            switch (tool){
                case POINT: currentWindow.getLienzo().setTool(Tool.POINT); break;
                case LINE: currentWindow.getLienzo().setTool(Tool.LINE); break;
                case RECTANGLE: currentWindow.getLienzo().setTool(Tool.RECTANGLE); break;
                case ELLIPSE: currentWindow.getLienzo().setTool(Tool.ELLIPSE); break;
                case ROUNDRECTANGLE: currentWindow.getLienzo().setTool(Tool.ROUNDRECTANGLE); break;
                case ARC: currentWindow.getLienzo().setTool(Tool.ARC); break;
                case CUBICCURVE: currentWindow.getLienzo().setTool(Tool.CUBICCURVE); break;
                case QUADCURVE: currentWindow.getLienzo().setTool(Tool.QUADCURVE); break;                    
                case PATH: currentWindow.getLienzo().setTool(Tool.PATH); break;                    
                case NONE: currentWindow.getLienzo().setTool(Tool.NONE); if (wasEditing) currentWindow.getLienzo().setEdit(true); break;
            }
            
            // Actualizo atributos previos
            currentWindow.getLienzo().setPrevAtributes(currentAtributes);            
            
        // Si la ventana es null desactivo botones
        } else {
            deactivateTools();
        }

        // Actualizo etiqueta de la herramienta
        updateToolLabel();
    }

    /**
     * Actualiza la etiqueta con la herramienta actual
     */
    private void updateToolLabel() {
        if (currentWindow != null) {
            String txt = currentWindow.getLienzo().getTool().toString();
            
            if (currentWindow.getLienzo().edit())
                txt = "Edición";
            
            toolLabel.setText("Herramienta: " + txt);
        }
    }
    
    /**
     * Activa o desactiva las coordenadas del cursor
     * @param show Si se quieren mostrar las coordenadas del cursor o no
     */
    public void showMouseCoordinates(boolean show) {
        mouseCoordinatesLabel.setVisible(show);
    }
    
    /**
     * Actualiza la etiqueta con las coordenadas del cursor
     * @param p Punto actual donde se encuentra el cursor
     */
    public void updateMouseCoordinatesLabel(Point2D p) {
        mouseCoordinatesLabel.setText("(x: " + (int) p.getX() + ", y: " + (int) p.getY() + ") ");
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JButton addImgButton;
    private javax.swing.JButton alphaButton;
    protected javax.swing.JSlider alphaSlider;
    protected javax.swing.JToggleButton arcButton;
    private javax.swing.JButton audioButton;
    private javax.swing.JComboBox<File> audioFilesComboBox;
    protected javax.swing.JButton backgroundColorChooserButton;
    private javax.swing.JComboBox bandsCombobox;
    private javax.swing.JButton brightnessButton;
    protected javax.swing.JSlider brightnessSlider;
    private javax.swing.JMenuItem changeNewCanvasSize;
    private javax.swing.JButton chessApplyButton;
    private javax.swing.JButton chessButton;
    private javax.swing.JSlider chessSlider;
    private javax.swing.JLabel chessValueLabel;
    protected javax.swing.JButton colorChooserButton;
    private javax.swing.JButton contrastButton;
    protected javax.swing.JToggleButton cubicCurveButton;
    private javax.swing.JButton darkButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteSelected;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JPanel desktopPanel;
    private javax.swing.JButton divideButton;
    private javax.swing.JButton duplicateButton;
    private javax.swing.JButton ecualizeButton;
    protected javax.swing.JToggleButton editButton;
    private javax.swing.JButton effectsButton;
    private javax.swing.JComboBox effectsComboBox;
    protected javax.swing.JToggleButton ellipseButton;
    private javax.swing.JButton extractBandsButton;
    protected javax.swing.JToggleButton fillButton;
    private javax.swing.JButton florButton;
    protected javax.swing.JToggleButton gradientButton;
    protected javax.swing.JComboBox gradientTypeComboBox;
    protected javax.swing.ButtonGroup grupoHerramientas;
    private javax.swing.JMenuItem guardarArchivo;
    private javax.swing.JToolBar imageToolBar;
    protected javax.swing.JTextField inputX;
    protected javax.swing.JTextField inputY;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JButton lightButton;
    protected javax.swing.JToggleButton lineButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JLabel mouseCoordinatesLabel;
    private javax.swing.JButton multiplyButton;
    private javax.swing.JButton negativeButton;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem nuevoArchivo;
    private javax.swing.JButton openButton;
    protected javax.swing.JToggleButton pathButton;
    protected javax.swing.JToggleButton pencilButton;
    private javax.swing.JButton playButton;
    protected javax.swing.JToggleButton quadCurveButton;
    private javax.swing.JButton rainbowToggleButton;
    private javax.swing.JComboBox rainbowTypeComboBox;
    private javax.swing.JButton recordButton;
    private javax.swing.JLabel recordingTime;
    protected javax.swing.JToggleButton rectangleButton;
    private javax.swing.JButton rotate180Button;
    private javax.swing.JButton rotate270Button;
    private javax.swing.JButton rotate90Button;
    private javax.swing.JButton rotateButton;
    protected javax.swing.JSlider rotationSlider;
    protected javax.swing.JToggleButton roundRectangleButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JToolBar.Separator sep2;
    private javax.swing.JToolBar.Separator sep4;
    private javax.swing.JToolBar.Separator sep5;
    private javax.swing.JToolBar.Separator sep6;
    private javax.swing.JToolBar.Separator sep7;
    private javax.swing.JToolBar.Separator sep8;
    private javax.swing.JToolBar.Separator sep9;
    private javax.swing.JButton sepiaButton;
    private javax.swing.JToolBar.Separator sepp;
    private javax.swing.JToolBar.Separator sepp1;
    private javax.swing.JToolBar.Separator sepp2;
    private javax.swing.JToolBar.Separator sepp3;
    private javax.swing.JToolBar.Separator sepp4;
    private javax.swing.JToolBar.Separator sepp5;
    private javax.swing.JToolBar.Separator sepp6;
    private javax.swing.JButton sinusoidalButton;
    protected javax.swing.JToggleButton smoothButton;
    private javax.swing.JButton sobelButton;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton stopButton;
    protected javax.swing.JToggleButton strokeButton;
    protected javax.swing.JSpinner strokeSpinner;
    private javax.swing.JButton subtractImgButton;
    private javax.swing.JButton tintButton;
    private javax.swing.JLabel tintLabel;
    private javax.swing.JSlider tintSlider;
    private javax.swing.JCheckBoxMenuItem toggleBarraDibujo;
    private javax.swing.JCheckBoxMenuItem toggleBarraEstado;
    private javax.swing.JCheckBoxMenuItem toggleBarraImagen;
    private javax.swing.JToolBar toolBar;
    protected javax.swing.JLabel toolLabel;
    private javax.swing.JSeparator topSeparator;
    private javax.swing.JButton umbralButton;
    private javax.swing.JSlider umbralSlider;
    protected javax.swing.JComboBox<AGShape> vShapeComboBox;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
